[{"content":"上回我们讲到怎么配置sub-store服务端，今天我们来讲讲sub-store的基础用法：导入我们的自定义节点，生成一个全平台通用的sing-box订阅文件\nsing-box是一个全平台通用的代理软件，支持目前市面上几乎所有的主流协议，如果你的目的仅仅是翻墙，那么使用它已完全足够\n首先我们登录到上回搭建的sub-store后台：https://yourdomain.example.com\n点击右上角的“+”号，选择单条订阅（这里有一个123是因为我已经生成过了订阅文件，新建的是空的）\n带星号的是必填项，随便填一个名字，然后选择“本地订阅”，导入你自建的节点URI或者JSON（可以从小火箭、V2RAYNG这样的软件中导出），每行一个\n如果你是机场用户，可以选择“远程链接”导入你的机场订阅节点，其他步骤是一样的\n填完后保存，这样我们节点就导入好了，接下来我们来导入sing-box配置文件\n底栏点击第二个图标，进入文件管理（这里有两个test文件是因为我已经创建过了，新建的是空的）\n填一个名字，来源选择远程，这里推荐亚托利佬的配置文件，填入https://raw.githubusercontent.com/xishang0128/sub-store-template/main/sing-box.json\n拉到下面来到脚本操作，在添加一个操作下面点击“脚本操作”，选择链接，填入https://raw.githubusercontent.com/xream/scripts/main/surge/modules/sub-store-scripts/sing-box/template.js#name=123\u0026amp;outbound=🕳ℹ️all|all-auto🕳ℹ️hk|hk-auto🏷ℹ️港|hk|hongkong|kong kong|🇭🇰🕳ℹ️tw|tw-auto🏷ℹ️台|tw|taiwan|🇹🇼🕳ℹ️jp|jp-auto🏷ℹ️日本|jp|japan|🇯🇵🕳ℹ️sg|sg-auto🏷ℹ️^(?!.*(?:us)).*(新|sg|singapore|🇸🇬)🕳ℹ️us|us-auto🏷ℹ️美|us|unitedstates|united states|🇺🇸 （这里要把name参数的值改成你的节点订阅的名字，比如我之前建立的123\n（懒得截图了）\n最后保存，回到文件管理界面，点击文件旁边的第二个图标复制，然后就可以到sing-box里导入你的专属订阅链接了\n","date":"2024-12-26T12:48:08+08:00","permalink":"http://localhost:1313/p/sub-store%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/","title":"Sub-Store基础用法"},{"content":"Sub-Store是一个功能强大的订阅管理器，可以一次性管理多个自建节点和机场订阅，生成配置文件，以下是Sub-Store的后端部署过程\n首先你需要一台服务器，并且将域名指向这个服务器的IP，这里省略过程\n登录服务器，安装docker和docker compose\nwget -qO- https://get.docker.com | sh\n如果是国内的机器，请使用以下命令\nwget -qO- https://get.docker.com | sh --mirror Aliyun\n使用 pwgen -s 20 生成随机路径，如果没有pwgen请先通过 apt install pwgen 安装，以下以生成的随机路径 MHxrd3DfOBGU319E5C53 为例\n新建文件夹sub-store mkdir sub-store \u0026amp;\u0026amp; cd sub-store\n运行 nano docker-compose.yml 创建compose文件，填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 services: caddy: image: caddy container_name: caddy restart: unless-stopped ports: - \u0026#34;443:443\u0026#34; volumes: - ./conf:/etc/caddy - caddy_data:/data - caddy_config:/config sub-store: image: xream/sub-store container_name: sub-store restart: unless-stopped volumes: - ./data:/opt/app/data environment: SUB_STORE_FRONTEND_BACKEND_PATH: \u0026#34;/MHxrd3DfOBGU319E5C53\u0026#34; # 这里改成你自己的随机路径 SUB_STORE_CRON: \u0026#34;55 23 * * *\u0026#34; volumes: caddy_data: caddy_config: Ctrl + X 保存\n生成存放caddy配置的文件夹，创建Caddyfile\n1 2 mkdir conf \u0026amp;\u0026amp; cd conf nano Caddyfile 将以下内容填入Caddyfile\n1 2 3 yourdomain.example.com { # 这里改成你的域名 reverse_proxy http://sub-store:3001 } Ctrl + X 保存，然后回到上层目录 cd .. ，运行 docker compose up -d 拉起容器\n稍等一会等caddy生成证书后，通过 https://yourdomain.example.com?api=https://yourdomain.example.com/MHxrd3DfOBGU319E5C53 登录sub-store后台\n首次登录需要输入完整地址，后续可以直接通过 https://yourdomain.example.com 登录\n点击底栏的设置图标，打开后端设置，名称随意，输入后端地址：https://yourdomain.example.com/MHxrd3DfOBGU319E5C53\n保存，将默认后端改成你新建的后端地址\n至此sub-store服务端部署完成\n","date":"2024-12-23T13:31:45+08:00","permalink":"http://localhost:1313/p/%E4%BD%BF%E7%94%A8docker-compose%E5%92%8Ccaddy%E5%BB%BA%E7%AB%8Bsub-store%E5%AE%9E%E4%BE%8B/","title":"使用docker-compose和caddy建立sub-store实例"}]